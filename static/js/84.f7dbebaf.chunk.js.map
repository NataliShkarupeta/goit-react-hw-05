{"version":3,"file":"static/js/84.f7dbebaf.chunk.js","mappings":"qMAEaA,E,OAAeC,GAAAA,GAAD,yE,SCQ3B,EARwB,WACpB,OACE,SAACD,EAAD,wDAIL,C,uGCNYE,EAAMD,EAAAA,GAAAA,IAAH,qGAOHE,EAAKF,EAAAA,GAAAA,GAAH,8E,mGCPDG,E,OAAaH,GAAAA,KAAH,2F,SCEXI,EAAc,SAAAC,GACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAaA,OACE,UAACL,EAAD,CAAYM,SAPG,SAAAC,GACfA,EAAEC,iBACFN,EAAMO,WAAWL,EAClB,EAIC,WACE,kBAAOM,KAAK,OAAOC,SAZJ,SAAAJ,GACjBF,EAAQE,EAAEK,OAAOC,MAClB,EAU4CA,MAAOT,KAChD,mBAAQM,KAAK,SAAb,sBAGL,E,2CCiCD,EAjDe,WAAO,IAAD,EACnB,GAA4BP,EAAAA,EAAAA,UAAS,IAArC,eAAOW,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MAsBjB,OAfAC,EAAAA,EAAAA,YAAU,WACM,KAAVJ,IACFK,EAAAA,EAAAA,IAAcL,GACXM,MAAK,SAAAC,GACJ,OAAIA,EAAQC,GACHD,EAAQE,OAEVC,QAAQC,OAAO,IAAIC,MAAM,iBACjC,IACAN,MAAK,SAAAO,GAAI,OAAIjB,EAAUiB,EAAKC,QAAnB,IAETC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACjB,GAAE,CAAChB,KAIF,iCACE,SAAClB,EAAD,CAAaQ,WArBE,SAAA6B,GACjBpB,EAA8B,KAAdoB,EAAmB,CAAEnB,MAAOmB,GAAc,CAAC,EAC5D,EAmBwCnB,MAAOA,IAEzB,IAAlBL,EAAOyB,QAAyB,KAATpB,GACtB,SAACqB,EAAA,QAAD,KAEA,+BACE,SAAC,IAAD,UACG1B,EAAO2B,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMzB,GAAhD,SACGqB,EAAMK,OAASL,EAAMM,QAFjBN,EAAME,GADA,UAY5B,C,uJCtDD,IAAMK,EAAO,mCACPC,EAAQ,+BAEDC,EAAW,WACvB,OAAOC,MAAM,GAAD,OAAIF,EAAJ,qCAAyCD,GAErD,EAEYI,EAAkB,SAAAC,GAC7B,OAAOF,MAAM,GAAD,OAAIF,EAAJ,kBAAsBI,EAAtB,oBAAyCL,GACtD,EAEYM,EAAkB,SAAAD,GAC7B,OAAOF,MAAM,GAAD,OAAIF,EAAJ,kBAAsBI,EAAtB,4BAAiDL,GAC9D,EAGYO,EAAe,SAAAF,GAC1B,OAAOF,MAAM,GAAD,OAAIF,EAAJ,kBAAsBI,EAAtB,4BAAiDL,GAC9D,EAGYzB,EAAgB,SAAAL,GAC3B,OAAOiC,MAAM,GAAD,OAAIF,EAAJ,iCAAqCD,EAArC,kBAAsD9B,GACnE,C","sources":["components/DefaultComponent/DefaultComponent.styled.js","components/DefaultComponent/DefaultComponent.jsx","pages/Home/Home.styled.js","pages/Movies/Movies.styled.js","components/SearchField/SEarcoField.jsx","pages/Movies/Movies.jsx","service/service.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const DefaultMassage=styled.h2`\npadding: 40px;\ntext-align: center;\nmargin: 0;\n`","import { DefaultMassage } from \"./DefaultComponent.styled\"\n\n const DefaultComponent=()=>{\n    return (\n      <DefaultMassage>\n        Oops......No information for this request!\n      </DefaultMassage>\n    );\n}\n\nexport default DefaultComponent;","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n  padding: 20px;\n`;\n\nexport const H2 = styled.h2`\n  margin: 0;\n  font-weight: 500;\n  font-size: 30px;\n`;\n","import styled from \"styled-components\";\n\n export const FormSearch = styled.form`\n   display: block;\n   margin-top: 15px;\n   padding-left: 20px;\n `;\n\n","import { FormSearch } from 'pages/Movies/Movies.styled';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchField = props => {\n  const [word, setWord] = useState('');\n\n\n  const searchWord = e => {\n    setWord(e.target.value);\n  };\n\n  const onSearch = e => {\n    e.preventDefault();\n    props.searchWord(word);\n  };\n\n\n  return (\n    <FormSearch onSubmit={onSearch}>\n      <input type=\"text\" onChange={searchWord} value={word} />\n      <button type=\"submit\">Search</button>\n    </FormSearch>\n  );\n};\n\n\nSearchField.propTypes = {\n  searchWord:PropTypes.func.isRequired,\n};","import {  useState } from 'react';\nimport { SearchField } from 'components/SearchField/SEarcoField';\nimport { fetchApiQuery } from 'service/service';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { Box } from 'pages/Home/Home.styled';\nimport { useEffect } from 'react';\nimport DefaultComponent from 'components/DefaultComponent/DefaultComponent';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  \n  const searchWord = queryWord => {\n    setSearchParams(queryWord !== '' ? { query: queryWord } : {});\n  };\n\n  useEffect(() => {\n    if (query !== '')\n      fetchApiQuery(query)\n        .then(respons => {\n          if (respons.ok) {\n            return respons.json();\n          }\n          return Promise.reject(new Error('Sorry no info'));\n        })\n        .then(data => setMovies(data.results))\n\n        .catch(error => console.log(error));\n  }, [query]);\n\n  \n  return (\n    <>\n      <SearchField searchWord={searchWord} query={query} />\n\n      {movies.length === 0 && query!== '' ? (\n        <DefaultComponent />\n      ) : (\n        <>\n          <Box>\n            {movies.map(movie => (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.title || movie.name}\n                </Link>\n              </li>\n            ))}\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","\nconst Api_Key = `1bff0abb40f6fadb07212f8cd9949625`;\nconst Base_Url = `https://api.themoviedb.org/3`;\n\nexport const fetchApi = () => {\n return fetch(`${Base_Url}/trending/all/day?api_key=${Api_Key}`);\n    \n}\n\nexport const fetchApiDetalis = movieId => {\n  return fetch(`${Base_Url}/movie/${movieId}?api_key=${Api_Key}`);\n};\n\nexport const fetchApiReviews = movieId => {\n  return fetch(`${Base_Url}/movie/${movieId}/reviews?api_key=${Api_Key}`);\n};\n\n\nexport const fetchApiCast = movieId => {\n  return fetch(`${Base_Url}/movie/${movieId}/credits?api_key=${Api_Key}`);\n};\n\n\nexport const fetchApiQuery = query => {\n  return fetch(`${Base_Url}/search/movie?api_key=${Api_Key}&query=${query}`);\n};\n\n"],"names":["DefaultMassage","styled","Box","H2","FormSearch","SearchField","props","useState","word","setWord","onSubmit","e","preventDefault","searchWord","type","onChange","target","value","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","fetchApiQuery","then","respons","ok","json","Promise","reject","Error","data","results","catch","error","console","log","queryWord","length","DefaultComponent","map","movie","to","id","state","from","title","name","Api_Key","Base_Url","fetchApi","fetch","fetchApiDetalis","movieId","fetchApiReviews","fetchApiCast"],"sourceRoot":""}